#!/usr/bin/env python

import click
import pandas as pd
from Bio import SeqIO

def gff_anno_to_df(file_gff):
    clms = ['seqname', 'source', 'feature', 'nstart', 'nend', 'score', 'strand', 'frame', 'attr']
    gff = pd.read_csv(file_gff, sep='\t', comment='#', names=clms)
    
    annos = gff[gff.feature=='CDS'].attr.to_list()
    annos_dict = []
    for anno in annos:
        annos_dict.append({x.split('=')[0]:x.split('=')[1] for x in anno.split(';') if x.split('=')[0]!='Note'})
    
    df = pd.DataFrame(annos_dict)
    df['feature_id'] = df.apply(lambda x:'acb:'+x['locus_tag'], axis=1)
    df['Geneid'] = df['ID']
    return df


def create_viral_anno(file_gbk):
    vgbk = SeqIO.read(file_gbk, 'genbank')
    cdss = [x for x in vgbk.features if x.type=='CDS']
    
    annos = []
    for cds in cdss:
        start = int(cds.location.start)
        end = int(cds.location.end)
        product = cds.qualifiers['label'][0].strip()
        feature_id = 'vB_AB_HMGU1:{}-{}'.format(start, end)
        annos.append([feature_id, product])
    
    df = pd.DataFrame(annos, columns=['feature_id', 'product_vgene'])
    return df


def reformat_counts_table(file_feature_counts, bac_anno, viral_anno):
    ct = pd.read_csv(file_feature_counts, sep='\t')
    clms = list(ct.columns)[1:]
    df = ct.merge(bac_anno[['Geneid', 'feature_id', 'protein_id', 'product']], on='Geneid', how='left')
    df.fillna('0', inplace=True)
    df['feature_id'] = df.apply(lambda x:x['Geneid'] if x['feature_id']=='0' else x['feature_id'], axis=1)
    df['protein_id'] = df.apply(lambda x:x['Geneid'] if x['protein_id']=='0' else x['protein_id'], axis=1)
    
    df2 = df.merge(viral_anno, on='feature_id', how='left')
    df2['product'] = df2.apply(lambda x:x['product_vgene'] if x['product']=='0' else x['product'], axis=1)
    
    return df2[['feature_id', 'protein_id', 'product']+clms]

def kegg_annotation(ko2pathway, feature2ko, feature_counts):
    k2p = pd.read_csv(ko2pathway, sep='\t')
    f2k = pd.read_csv(feature2ko, sep='\t', names=['feature_id', 'koid'])
    
    f2p = f2k.merge(k2p, on='koid', how='left')
    f2p = f2p[f2p.pathid!='no_pathway'].copy()
    return f2p.merge(feature_counts, on='feature_id', how='outer')


@click.command()
@click.option("--file_bacteria_anno", '-b', help="Bacteria annotation in GFF3 format")
@click.option("--file_virus_anno", '-v', help="Virus annotation in Genbank format")
@click.option("--file_feature_counts", '-c', help="CDS counts generated by featureCounts")
@click.option("--feature2ko", '-k', help="Feature to KO mapping")
@click.option("--ko2pathway", '-p', help="KO to pathway mapping")
@click.option("--fout_feature_counts", '-o', help="Output new feature counts table")
@click.option("--fout_func_counts", '-f', help="Output KEGG functional annotation counts table")
def main(file_bacteria_anno, file_virus_anno, file_feature_counts, feature2ko, ko2pathway, fout_feature_counts, fout_func_counts):
    bac_anno = gff_anno_to_df(file_bacteria_anno)
    viral_anno = create_viral_anno(file_virus_anno)
    
    feature_counts = reformat_counts_table(file_feature_counts, bac_anno, viral_anno)
    feature_counts.to_csv(fout_feature_counts, sep='\t', index=False)
    
    func_counts = kegg_annotation(ko2pathway, feature2ko, feature_counts)
    func_counts.to_csv(fout_func_counts, sep='\t', index=False)


if __name__ == '__main__':
    main()